Parameters:
  RepoUrl:
    Type: String
    Description: The URL of the repo that the CodeBuild project will clone.
  RepoBranchName:
    Type: String
    Default: main
    Description: (Optional) The name of the branch that the CodeBuild project will clone.
  ParticipantRoleArn:
    Type: String
    Default: ""
    Description: (Optional) The ARN belonging to the role for whom these resources are being created.
  ParticipantAssumedRoleArn:
    Type: String
    Default: ""
    Description: (Optional) The ARN belonging to the assumed role identity for whom these resources are being created.
  AssetsBucketName:
    Type: String
    Default: ""
    Description: (Optional) The S3 Bucket containing assets for use by this stack or the resources created by it.
  AssetsBucketPrefix:
    Type: String
    Default: ""
    Description: (Optional) The prefix under which the assets are located. (This should end with a "/".)
  IsWorkshopStudioEnv:
    Type: String
    Default: "no"
    AllowedValues:
      - "no"
      - "yes"
    Description: (Optional) Whether this stack is being deployed in a Workshop Studio environment or not. If not sure, leave as default of "no".
Resources:
  WSCodeBuildServiceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: codebuild.amazonaws.com
        Version: "2012-10-17"
      Description: Workshop Studio CodeBuild Service Role
      ManagedPolicyArns:
        - Fn::Join:
            - ""
            - - "arn:"
              - Ref: AWS::Partition
              - :iam::aws:policy/AdministratorAccess
  WSCodeBuildServiceRoleDefaultPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:PutLogEvents
            Effect: Allow
            Resource:
              - Fn::Join:
                  - ""
                  - - "arn:"
                    - Ref: AWS::Partition
                    - ":logs:"
                    - Ref: AWS::Region
                    - ":"
                    - Ref: AWS::AccountId
                    - :log-group:/aws/codebuild/
                    - Ref: InstallWorkshopStack
              - Fn::Join:
                  - ""
                  - - "arn:"
                    - Ref: AWS::Partition
                    - ":logs:"
                    - Ref: AWS::Region
                    - ":"
                    - Ref: AWS::AccountId
                    - :log-group:/aws/codebuild/
                    - Ref: InstallWorkshopStack
          - Action:
              - codebuild:CreateReportGroup
              - codebuild:CreateReport
              - codebuild:UpdateReport
              - codebuild:BatchPutTestCases
              - codebuild:BatchPutCodeCoverages
            Effect: Allow
            Resource:
              Fn::Join:
                - ""
                - - "arn:"
                  - Ref: AWS::Partition
                  - ":codebuild:"
                  - Ref: AWS::Region
                  - ":"
                  - Ref: AWS::AccountId
                  - :report-group/
                  - Ref: InstallWorkshopStack
                  - -*
        Version: "2012-10-17"
      PolicyName: WSCodeBuildServiceRoleDefaultPolicy
      Roles:
        - Ref: WSCodeBuildServiceRole
  CodeBuildTriggerLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
        Version: "2012-10-17"
      Description: role for lambda to trigger codebuild
      ManagedPolicyArns:
        - Ref: CodeBuildTriggerLambdaRolePolicy
  CodeBuildTriggerLambdaRolePolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - codebuild:StartBuild
              - codebuild:StopBuild
              - codebuild:BatchGetBuilds
            Effect: Allow
            Resource: "*"
          - Action:
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:PutLogEvents
            Effect: Allow
            Resource: "*"
        Version: "2012-10-17"
      Description: role policy for lambda to trigger codebuild
      Path: /
  InstallWorkshopStack:
    Type: AWS::CodeBuild::Project
    Properties:
      Artifacts:
        Type: NO_ARTIFACTS
      Environment:
        ComputeType: BUILD_GENERAL1_SMALL
        EnvironmentVariables:
          - Name: REPO_URL
            Type: PLAINTEXT
            Value:
              Ref: RepoUrl
          - Name: REPO_BRANCH_NAME
            Type: PLAINTEXT
            Value:
              Ref: RepoBranchName
          - Name: IS_WORKSHOP_STUDIO_ENV
            Type: PLAINTEXT
            Value:
              Ref: IsWorkshopStudioEnv
          - Name: PARTICIPANT_ROLE_ARN
            Type: PLAINTEXT
            Value:
              Ref: ParticipantRoleArn
          - Name: PARTICIPANT_ASSUMED_ROLE_ARN
            Type: PLAINTEXT
            Value:
              Ref: ParticipantAssumedRoleArn
          - Name: ASSETS_BUCKET_NAME
            Type: PLAINTEXT
            Value:
              Ref: AssetsBucketName
          - Name: ASSETS_BUCKET_PREFIX
            Type: PLAINTEXT
            Value:
              Ref: AssetsBucketPrefix
        Image: aws/codebuild/amazonlinux2-x86_64-standard:5.0
        ImagePullCredentialsType: CODEBUILD
        PrivilegedMode: true
        Type: LINUX_CONTAINER
      ServiceRole:
        Fn::GetAtt:
          - WSCodeBuildServiceRole
          - Arn
      Source:
        BuildSpec: |-
          {
            "version": "0.2",
            "env": {
              "shell": "bash"
            },
            "phases": {
              "install": {
                "runtime-versions": {
                  "python": "3.11"
                },
                "commands": [
                  "echo Installing dependencies...",
                  "yum update -y",
                  "yum install -y jq git",
                  "echo Installing yq version 4.40.5...",
                  "curl -L -o /usr/local/bin/yq https://github.com/mikefarah/yq/releases/download/v4.40.5/yq_linux_amd64",
                  "chmod +x /usr/local/bin/yq",
                  "echo Installing Terraform v1.5.7...",
                  "curl -L -o /tmp/terraform.zip https://releases.hashicorp.com/terraform/1.5.7/terraform_1.5.7_linux_amd64.zip",
                  "unzip /tmp/terraform.zip -d /usr/local/bin/",
                  "chmod +x /usr/local/bin/terraform",
                  "echo Installing Docker...",
                  "curl -L -o /tmp/docker.tgz https://download.docker.com/linux/static/stable/x86_64/docker-24.0.6.tgz",
                  "tar -xzvf /tmp/docker.tgz -C /tmp",
                  "mv /tmp/docker/* /usr/local/bin/",
                  "echo Verifying installations...",
                  "docker --version",
                  "aws --version",
                  "yq --version",
                  "terraform --version"
                ]
              },
              "build": {
                "commands": [
                  "mkdir workshop && cd workshop",
                  "echo \"Cloning repository from: ${REPO_URL} branch: ${REPO_BRANCH_NAME}\"",
                  "git clone --single-branch --branch \"${REPO_BRANCH_NAME}\" \"${REPO_URL}\" .",
                  "echo \"Request type: ${EVENT_REQUEST_TYPE}\"",
                  "./manage-workshop-stack.sh \"${EVENT_REQUEST_TYPE}\""
                ]
              },
              "post_build": {
                "commands": [
                  "if [ \"$CODEBUILD_BUILD_SUCCEEDING\" == \"1\" ]; then export STATUS=\"SUCCESS\"; else export STATUS=\"FAILED\"; fi",
                  
                  "# Create response JSON using heredoc (cleaner approach)",
                  "cat > /tmp/response.json << EOF
{
  \"Status\": \"$STATUS\",
  \"Reason\": \"See the details in CloudWatch Log Stream: $CONTEXT_LOG_STREAM_NAME\",
  \"StackId\": \"$EVENT_STACK_ID\",
  \"PhysicalResourceId\": \"$CONTEXT_LOG_STREAM_NAME\",
  \"RequestId\": \"$EVENT_REQUEST_ID\",
  \"LogicalResourceId\": \"$EVENT_LOGICAL_RESOURCE_ID\",
  \"Data\": {
    \"ApiEndpoint\": \"$CF_API_ENDPOINT\",
    \"LitellmDashboardUI\": \"$CF_LITELLM_DASHBOARD_UI\",
    \"EcsClusterName\": \"$CF_ECS_CLUSTER_NAME\",
    \"RdsInstanceId\": \"$CF_RDS_INSTANCE_ID\",
    \"LitellmMasterKey\": \"$CF_LITELLM_MASTER_KEY\",
    \"LoginUsername\": \"$CF_LOGIN_USERNAME\"
  }
}
EOF",
                  
                  "# Show the response for debugging",
                  "echo \"Response JSON:\"",
                  "cat /tmp/response.json",
                  
                  "# Send the response",
                  "curl -X PUT --data-binary @/tmp/response.json \"$EVENT_RESPONSE_URL\""
                ]
              }
            }
          }
        Type: NO_SOURCE
      Cache:
        Type: NO_CACHE
      EncryptionKey: alias/aws/s3
      TimeoutInMinutes: 60
  TriggerCodeBuild:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: |-
          import boto3
          import os

          def lambda_handler(event, context):
              print(event)
              project_name = os.environ.get("PROJECT_NAME")
              cb_cli = boto3.client("codebuild")
              cb_env_vars = [
                  {
                      'name': 'EVENT_REQUEST_TYPE',
                      'value': event['RequestType'],
                      'type': 'PLAINTEXT'
                  },
                  {
                      'name': 'EVENT_REQUEST_ID',
                      'value': event['RequestId'],
                      'type': 'PLAINTEXT'
                  },
                  {
                      'name': 'EVENT_STACK_ID',
                      'value': event['StackId'],
                      'type': 'PLAINTEXT'
                  },
                  {
                      'name': 'EVENT_LOGICAL_RESOURCE_ID',
                      'value': event['LogicalResourceId'],
                      'type': 'PLAINTEXT'
                  },
                  {
                      'name': 'EVENT_RESPONSE_URL',
                      'value': event['ResponseURL'],
                      'type': 'PLAINTEXT'
                  },
                  {
                      'name': 'CONTEXT_LOG_STREAM_NAME',
                      'value': context.log_stream_name,
                      'type': 'PLAINTEXT'
                  },
              ]
              cb_cli.start_build(projectName=project_name, environmentVariablesOverride=cb_env_vars)
      Role:
        Fn::GetAtt:
          - CodeBuildTriggerLambdaRole
          - Arn
      Environment:
        Variables:
          PROJECT_NAME:
            Ref: InstallWorkshopStack
      Handler: index.lambda_handler
      Runtime: python3.11
      Timeout: 900
    DependsOn:
      - CodeBuildTriggerLambdaRole
  CustomProvisioningResource:
    Type: AWS::CloudFormation::CustomResource
    Properties:
      ServiceToken:
        Fn::GetAtt:
          - TriggerCodeBuild
          - Arn
    UpdateReplacePolicy: Delete
    DeletionPolicy: Delete
Outputs:
  ApiEndpoint:
    Description: "The API endpoint for the GenAI Gateway"
    Value: !GetAtt CustomProvisioningResource.ApiEndpoint
  LitellmDashboardUI:
    Description: "The Litellm Dashboard UI for the GenAI Gateway"
    Value: !GetAtt CustomProvisioningResource.LitellmDashboardUI
  EcsClusterName:
    Description: "The ECS Cluster Name for the GenAI Gateway"
    Value: !GetAtt CustomProvisioningResource.EcsClusterName
  RdsInstanceId:
    Description: "The RDS Instance ID for the GenAI Gateway"
    Value: !GetAtt CustomProvisioningResource.RdsInstanceId
  LitellmMasterKey:
    Description: "The LITELLM Master Key for the GenAI Gateway"
    Value: !GetAtt CustomProvisioningResource.LitellmMasterKey
  LoginUsername:
    Description: "The login username for the GenAI Gateway"
    Value: !GetAtt CustomProvisioningResource.LoginUsername
